<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on The SlashDevOps site</title>
    <link>http://localhost:1313/blog/</link>
    <description>Recent content in Blogs on The SlashDevOps site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>christian@slashdevops.com (SlashDevOps)</managingEditor>
    <webMaster>christian@slashdevops.com (SlashDevOps)</webMaster>
    <lastBuildDate>Sat, 03 Dec 2022 20:39:29 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Secure and Easy AWS Connection Assuming a Role With Jenkins Shared Library</title>
      <link>http://localhost:1313/blog/post/2022/12/03/1/secure-and-easy-aws-connection-assuming-a-role-with-jenkins-shared-library/</link>
      <pubDate>Sat, 03 Dec 2022 20:39:29 +0100</pubDate><author>christian@slashdevops.com (SlashDevOps)</author>
      <guid>http://localhost:1313/blog/post/2022/12/03/1/secure-and-easy-aws-connection-assuming-a-role-with-jenkins-shared-library/</guid>
      <description>The Problem Surely and like me, you are trying to be more secure when connecting Jenkins with your AWS Accounts assuming a role. If you are asking What is that? , please read this: https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html&#xA;Of course, there are many different options to use, but the problem always surrounds us, if you use a plugin then the maintainability and security when talking about Jenkins plugins for sure decrease.&#xA;I particularly hate Jenkins, from my point of view this is an obsolete tool trying to survive in the modern world, and if you are concerned about security (and maintainability) sure understand my point.</description>
    </item>
    <item>
      <title>Managing the Lifecycle of your Elasticsearch Indices</title>
      <link>http://localhost:1313/blog/post/2020/05/13/1/managing-the-lifecycle-of-your-elasticsearch-indices/</link>
      <pubDate>Wed, 13 May 2020 17:59:22 +0100</pubDate><author>christian@slashdevops.com (SlashDevOps)</author>
      <guid>http://localhost:1313/blog/post/2020/05/13/1/managing-the-lifecycle-of-your-elasticsearch-indices/</guid>
      <description>Managing the Lifecycle of your Elasticsearch Indices Just like me, you are probably storing your [Applications | Infrastructure | IoT ] Logs / Traces (as a time series) into Elasticsearch or at least considering doing it.&#xA;If that is the case, you might be wondering how to efficiently manage index lifecycles in an automated and clean manner, then this post is for you!&#xA;What&amp;rsquo;s happening? Basically, this means that your log management/aggregator applications are storing the logs in Elasticsearch using the timestamp (of capture, processing, or another one) for every record of data and grouping, using a pattern for every group.</description>
    </item>
  </channel>
</rss>
